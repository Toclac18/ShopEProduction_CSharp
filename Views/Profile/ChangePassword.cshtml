@model dynamic

@{
    ViewData["Title"] = "Change Password";
    var attempts = (int)(ViewData["PasswordAttempts"] ?? 0);
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-lg border-0">
                <div class="card-body p-4 p-md-5">
                    <h2 class="text-center mb-4 fw-bold text-primary">Change Password</h2>

                    <!-- Success Message -->
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="bi bi-check-circle-fill me-2"></i> @TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <!-- Form with Validation -->
                    <form asp-action="ChangePassword" method="post" class="needs-validation" novalidate id="changePasswordForm">
                        <!-- Current Password -->
                        <div class="mb-4 position-relative">
                            <label for="currentPassword" class="form-label fw-semibold">Current Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control form-control-lg" id="currentPassword" name="currentPassword" required />
                                <button type="button" class="btn btn-outline-secondary toggle-password" data-target="currentPassword">
                                    <i class="bi bi-eye-slash"></i>
                                </button>
                            </div>
                            <div class="invalid-feedback">Please enter your current password.</div>
                            @if (ViewData.ModelState["currentPassword"]?.Errors.Any() == true)
                            {
                                <span class="text-danger d-block mt-1">
                                    @ViewData.ModelState["currentPassword"].Errors.First().ErrorMessage
                                    @if (attempts > 0)
                                    {
                                        <br /> <strong>Attempts remaining: @(3 - attempts)</strong>
                                    }
                                </span>
                            }
                        </div>

                        <!-- New Password -->
                        <div class="mb-4 position-relative">
                            <label for="newPassword" class="form-label fw-semibold">New Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control form-control-lg" id="newPassword" name="newPassword" required minlength="6" />
                                <button type="button" class="btn btn-outline-secondary toggle-password" data-target="newPassword">
                                    <i class="bi bi-eye-slash"></i>
                                </button>
                            </div>
                            <div class="invalid-feedback" id="newPasswordFeedback">Password must be at least 6 characters long.</div>
                            @if (ViewData.ModelState["newPassword"]?.Errors.Any() == true)
                            {
                                <span class="text-danger d-block mt-1">@ViewData.ModelState["newPassword"].Errors.First().ErrorMessage</span>
                            }
                        </div>

                        <!-- Confirm Password -->
                        <div class="mb-4 position-relative">
                            <label for="confirmPassword" class="form-label fw-semibold">Confirm New Password</label>
                            <div class="input-group">
                                <input type="password" class="form-control form-control-lg" id="confirmPassword" name="confirmPassword" required />
                                <button type="button" class="btn btn-outline-secondary toggle-password" data-target="confirmPassword">
                                    <i class="bi bi-eye-slash"></i>
                                </button>
                            </div>
                            <div class="invalid-feedback" id="confirmPasswordFeedback">Passwords must match.</div>
                            @if (ViewData.ModelState["confirmPassword"]?.Errors.Any() == true)
                            {
                                <span class="text-danger d-block mt-1">@ViewData.ModelState["confirmPassword"].Errors.First().ErrorMessage</span>
                            }
                        </div>

                        <!-- Submit Button -->
                        <button type="submit" class="btn btn-primary btn-lg w-100 fw-semibold">Change Password</button>
                    </form>

                    <!-- Back to Profile -->
                    <div class="text-center mt-4">
                        <a class="btn btn-outline-secondary" onclick="history.back()">Back</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border-radius: 15px;
        background: linear-gradient(135deg, #ffffff, #f8f9fa);
    }

    .form-control {
        border-radius: 10px 0 0 10px; /* Rounded left corners, flat right for input-group */
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-control:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .form-control.is-invalid {
        border-color: #dc3545;
    }

    .btn-primary {
        border-radius: 10px;
        padding: 12px;
        background: #0d6efd;
        border: none;
        transition: background 0.3s ease, transform 0.2s ease;
    }

    .btn-primary:hover {
        background: #0b5ed7;
        transform: translateY(-2px);
    }

    .btn-outline-secondary {
        border-radius: 10px;
        padding: 10px 20px;
        transition: background 0.3s ease;
    }

    .btn-outline-secondary:hover {
        background: #f8f9fa;
    }

    .toggle-password {
        border-radius: 0 10px 10px 0; /* Rounded right corners */
        border-left: none; /* Seamless with input */
    }

    .text-primary {
        color: #0d6efd !important;
    }

    .fw-semibold {
        font-weight: 600;
    }

    .invalid-feedback {
        font-size: 0.9rem;
    }
</style>

@section Scripts {
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <!-- Validation Scripts -->
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            'use strict';

            var form = document.getElementById('changePasswordForm');
            var newPassword = document.getElementById('newPassword');
            var confirmPassword = document.getElementById('confirmPassword');
            var newPasswordFeedback = document.getElementById('newPasswordFeedback');
            var confirmPasswordFeedback = document.getElementById('confirmPasswordFeedback');

            // Toggle Password Visibility
            document.querySelectorAll('.toggle-password').forEach(button => {
                button.addEventListener('click', function () {
                    var targetId = this.getAttribute('data-target');
                    var input = document.getElementById(targetId);
                    var icon = this.querySelector('i');

                    if (input.type === 'password') {
                        input.type = 'text';
                        icon.classList.remove('bi-eye-slash');
                        icon.classList.add('bi-eye');
                    } else {
                        input.type = 'password';
                        icon.classList.remove('bi-eye');
                        icon.classList.add('bi-eye-slash');
                    }
                });
            });

            // Form Submission Validation
            form.addEventListener('submit', function (event) {
                var isValid = true;

                newPassword.classList.remove('is-invalid');
                confirmPassword.classList.remove('is-invalid');

                if (newPassword.value.length < 6) {
                    newPassword.classList.add('is-invalid');
                    newPasswordFeedback.textContent = 'Password must be at least 6 characters long.';
                    isValid = false;
                }

                if (newPassword.value !== confirmPassword.value) {
                    confirmPassword.classList.add('is-invalid');
                    confirmPasswordFeedback.textContent = 'Passwords must match.';
                    isValid = false;
                }

                if (!form.checkValidity() || !isValid) {
                    event.preventDefault();
                    event.stopPropagation();
                }

                form.classList.add('was-validated');
            }, false);

            // Real-time Validation
            newPassword.addEventListener('input', function () {
                if (newPassword.value.length < 6) {
                    newPassword.classList.add('is-invalid');
                    newPasswordFeedback.textContent = 'Password must be at least 6 characters long.';
                } else {
                    newPassword.classList.remove('is-invalid');
                }
            });

            confirmPassword.addEventListener('input', function () {
                if (newPassword.value !== confirmPassword.value) {
                    confirmPassword.classList.add('is-invalid');
                    confirmPasswordFeedback.textContent = 'Passwords must match.';
                } else {
                    confirmPassword.classList.remove('is-invalid');
                }
            });
        })();
    </script>
}